/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */
package org.opensearch.neuralsearch.transport;

import lombok.Getter;
import org.opensearch.action.support.nodes.BaseNodeResponse;
import org.opensearch.cluster.node.DiscoveryNode;
import org.opensearch.core.common.io.stream.StreamInput;
import org.opensearch.core.common.io.stream.StreamOutput;
import org.opensearch.core.xcontent.ToXContentFragment;
import org.opensearch.core.xcontent.XContentBuilder;
import org.opensearch.neuralsearch.stats.events.TimestampedEventStatSnapshot;
import org.opensearch.neuralsearch.stats.events.EventStatName;
import org.opensearch.neuralsearch.stats.metrics.MemoryStatSnapshot;
import org.opensearch.neuralsearch.stats.metrics.MetricStatName;

import java.io.IOException;
import java.util.Map;

/**
 * NeuralStatsNodeResponse represents the responses generated by an individual node
 */
@Getter
public class NeuralStatsNodeResponse extends BaseNodeResponse implements ToXContentFragment {
    private final Map<EventStatName, TimestampedEventStatSnapshot> eventStats;
    private final Map<MetricStatName, MemoryStatSnapshot> metricStats;

    /**
     * Constructor
     *
     * @param in  stream
     * @throws IOException in case of I/O errors
     */
    public NeuralStatsNodeResponse(StreamInput in) throws IOException {
        super(in);
        this.eventStats = in.readMap(input -> input.readEnum(EventStatName.class), TimestampedEventStatSnapshot::new);
        this.metricStats = in.readMap(input -> input.readEnum(MetricStatName.class), MemoryStatSnapshot::new);
    }

    /**
     * Constructor
     *
     * @param node node
     * @param eventStats mapping of stat name to value
     */
    public NeuralStatsNodeResponse(
        DiscoveryNode node,
        Map<EventStatName, TimestampedEventStatSnapshot> eventStats,
        Map<MetricStatName, MemoryStatSnapshot> metricStats
    ) {
        super(node);
        this.eventStats = eventStats;
        this.metricStats = metricStats;
    }

    /**
     * Creates a new NeuralStatsNodeResponse object and reads in the stats from an input stream
     *
     * @param in StreamInput to read from
     * @return NeuralStatsNodeResponse object corresponding to the input stream
     * @throws IOException throws an IO exception if the StreamInput cannot be read from
     */
    public static NeuralStatsNodeResponse readStats(StreamInput in) throws IOException {
        NeuralStatsNodeResponse neuralStats = new NeuralStatsNodeResponse(in);
        return neuralStats;
    }

    @Override
    public void writeTo(StreamOutput out) throws IOException {
        super.writeTo(out);
        out.writeMap(eventStats, StreamOutput::writeEnum, (output, eventStatData) -> eventStatData.writeTo(output));
        out.writeMap(metricStats, StreamOutput::writeEnum, (output, metricStatData) -> metricStatData.writeTo(output));
    }

    /**
     * Converts statsMap to xContent
     *
     * @param builder XContentBuilder
     * @param params Params
     * @return XContentBuilder
     * @throws IOException thrown by builder for invalid field
     */
    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {
        for (Map.Entry<EventStatName, TimestampedEventStatSnapshot> entry : eventStats.entrySet()) {
            EventStatName stat = entry.getKey();
            builder.field(stat.getFullPath(), entry.getValue().getValue());
        }
        for (Map.Entry<MetricStatName, MemoryStatSnapshot> entry : metricStats.entrySet()) {
            MetricStatName stat = entry.getKey();
            builder.field(stat.getFullPath(), entry.getValue().getValue());
        }
        return builder;
    }
}
