/*
 *  Copyright OpenSearch Contributors
 *  SPDX-License-Identifier: Apache-2.0
 */

import org.opensearch.gradle.testclusters.StandaloneRestIntegTestTask

apply from : "$rootDir/qa/build.gradle"

def ext=rootProject.ext
String baseName = "neuralSearchBwcCluster-rolling"

// Creates a test cluster of previous version and loads k-NN plugin of bwcVersion
testClusters {
    "${baseName}" {
        testDistribution = "ARCHIVE"
        jvmArgs("-Xms1g", "-Xmx4g")
        numberOfNodes = 3
        if(ext.bwcBundleTest){
            versions = [ext.neural_search_bwc_version, ext.currentBundleVersion]
            def path=ext.opensearch_tmp_dir
            nodes.each { node ->
                node.extraConfigFile("kirk.pem", file("$path/kirk.pem"))
                node.extraConfigFile("kirk-key.pem", file("$path/kirk-key.pem"))
                node.extraConfigFile("esnode.pem", file("$path/esnode.pem"))
                node.extraConfigFile("esnode-key.pem", file("$path/esnode-key.pem"))
                node.extraConfigFile("root-ca.pem", file("$path/root-ca.pem"))
                node.setting("plugins.security.disabled", "true")
                node.setting("plugins.security.ssl.transport.pemcert_filepath", "esnode.pem")
                node.setting("plugins.security.ssl.transport.pemkey_filepath", "esnode-key.pem")
                node.setting("plugins.security.ssl.transport.pemtrustedcas_filepath", "root-ca.pem")
                node.setting("plugins.security.ssl.transport.enforce_hostname_verification", "false")
                node.setting("plugins.security.ssl.http.enabled", "true")
                node.setting("plugins.security.ssl.http.pemcert_filepath", "esnode.pem")
                node.setting("plugins.security.ssl.http.pemkey_filepath", "esnode-key.pem")
                node.setting("plugins.security.ssl.http.pemtrustedcas_filepath", "root-ca.pem")
                node.setting("plugins.security.allow_unsafe_democertificates", "true")
                node.setting("plugins.security.allow_default_init_securityindex", "true")
                node.setting("plugins.security.authcz.admin_dn", "CN=kirk,OU=client,O=client,L=test,C=de")
                node.setting("plugins.security.audit.type", "internal_elasticsearch")
                node.setting("plugins.security.enable_snapshot_restore_privilege", "true")
                node.setting("plugins.security.check_snapshot_restore_write_privileges", "true")
                node.setting("plugins.security.restapi.roles_enabled", "[\"all_access\", \"security_rest_api_access\"]")
                node.setting("plugins.security.system_indices.enabled", "true")
            }
        }else{
            versions = [ext.neural_search_bwc_version, opensearch_version]
            plugin(project.tasks.zipBwcMlCommonsPlugin.archiveFile)
            plugin(project.tasks.zipBwcKnnPlugin.archiveFile)
            plugin(project.tasks.zipBwcPlugin.archiveFile)
        }
        setting 'path.repo', "${buildDir}/cluster/shared/repo/${baseName}"
        setting 'http.content_type.required', 'true'
    }
}


// Task to run BWC tests against the old cluster
task testAgainstOldCluster(type: StandaloneRestIntegTestTask) {
    if(!ext.bwcBundleTest){
        dependsOn "zipBwcPlugin"
    }
    useCluster testClusters."${baseName}"
    systemProperty 'tests.rest.bwcsuite_cluster', 'old_cluster'
    systemProperty 'tests.plugin_bwc_version', ext.neural_search_bwc_version
    systemProperty 'tests.skip_delete_model_index', 'true'

    //Excluding MultiModalSearchIT, HybridSearchIT, NeuralSparseSearchIT, NeuralQueryEnricherProcessorIT tests from neural search version 2.9 and 2.10
    // because these features were released in 2.11 version.
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.MultiModalSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.HybridSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralSparseSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralQueryEnricherProcessorIT.*"
        }
    }

    // Excluding the test because hybrid query with rescore is not compatible with 2.14 and lower
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10")
            || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")
            || ext.neural_search_bwc_version.startsWith("2.13") || ext.neural_search_bwc_version.startsWith("2.14")) {
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.HybridSearchWithRescoreIT.*"
        }
    }

    // Excluding the test because we introduce this feature in 2.13
    if (ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralQueryEnricherProcessorIT.testNeuralQueryEnricherProcessor_NeuralSparseSearch_E2EFlow"
        }
    }

    // Excluding the text chunking processor test because we introduce this feature in 2.13
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10") || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.TextChunkingProcessorIT.*"
        }
    }

    // Excluding the k-NN radial search and batch ingestion tests because we introduce these features in 2.14
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10") || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12") || ext.neural_search_bwc_version.startsWith("2.13")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.KnnRadialSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.BatchIngestionIT.*"
        }
    }

    // Excluding the neural sparse two phase processor test because we introduce this feature in 2.15
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10")
            || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")
            || ext.neural_search_bwc_version.startsWith("2.13") || ext.neural_search_bwc_version.startsWith("2.14")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralSparseTwoPhaseProcessorIT.*"
        }
    }


    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}

// Part of rolling upgrade. Upgrades one node of the old cluster to new OpenSearch version with upgraded plugin version
// This results in a mixed cluster with 2 nodes on the old version and 1 upgraded node.
task testAgainstOneThirdUpgradedCluster(type: StandaloneRestIntegTestTask) {
    useCluster testClusters."${baseName}"
    dependsOn rootProject.tasks.assemble
    dependsOn "testAgainstOldCluster"
    if (ext.bwcBundleTest){
        doFirst {
            testClusters."${baseName}".nextNodeToNextVersion()
        }
    }else{
        doFirst {
            testClusters."${baseName}".upgradeNodeAndPluginToNextVersion(project.ext.plugins)
        }
    }
    systemProperty 'tests.rest.bwcsuite_cluster', 'mixed_cluster'
    systemProperty 'tests.rest.first_round', 'true'
    systemProperty 'tests.skip_delete_model_index', 'true'
    systemProperty 'tests.plugin_bwc_version', ext.neural_search_bwc_version

    //Excluding MultiModalSearchIT, HybridSearchIT, NeuralSparseSearchIT, NeuralQueryEnricherProcessorIT tests from neural search version 2.9 and 2.10
    // because these features were released in 2.11 version.
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.MultiModalSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.HybridSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralSparseSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralQueryEnricherProcessorIT.*"
        }
    }

    // Excluding the test because hybrid query with rescore is not compatible with 2.14 and lower
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10")
            || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")
            || ext.neural_search_bwc_version.startsWith("2.13") || ext.neural_search_bwc_version.startsWith("2.14")) {
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.HybridSearchWithRescoreIT.*"
        }
    }

    // Excluding the test because we introduce this feature in 2.13
    if (ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralQueryEnricherProcessorIT.testNeuralQueryEnricherProcessor_NeuralSparseSearch_E2EFlow"
        }
    }

    // Excluding the text chunking processor test because we introduce this feature in 2.13
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10") || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.TextChunkingProcessorIT.*"
        }
    }

    // Excluding the k-NN radial search and batch ingestion tests because we introduce these features in 2.14
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10") || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12") || ext.neural_search_bwc_version.startsWith("2.13")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.KnnRadialSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.BatchIngestionIT.*"
        }
    }

    // Excluding the neural sparse two phase processor test because we introduce this feature in 2.15
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10")
            || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")
            || ext.neural_search_bwc_version.startsWith("2.13") || ext.neural_search_bwc_version.startsWith("2.14")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralSparseTwoPhaseProcessorIT.*"
        }
    }


    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}

// Part of rolling upgrade. Upgrades the second node to new OpenSearch version with upgraded plugin version after the
// first node is upgraded. This results in a mixed cluster with 1 node on the old version and 2 upgraded nodes.
task testAgainstTwoThirdsUpgradedCluster(type: StandaloneRestIntegTestTask) {
    dependsOn "testAgainstOneThirdUpgradedCluster"
    useCluster testClusters."${baseName}"
    if (ext.bwcBundleTest){
        doFirst {
            testClusters."${baseName}".nextNodeToNextVersion()
        }
    }else{
        doFirst {
            testClusters."${baseName}".upgradeNodeAndPluginToNextVersion(project.ext.plugins)
        }
    }
    systemProperty 'tests.rest.bwcsuite_cluster', 'mixed_cluster'
    systemProperty 'tests.rest.first_round', 'false'
    systemProperty 'tests.skip_delete_model_index', 'true'
    systemProperty 'tests.plugin_bwc_version', ext.neural_search_bwc_version

    // Excluding MultiModalSearchIT, HybridSearchIT, NeuralSparseSearchIT, NeuralQueryEnricherProcessorIT tests from neural search version 2.9 and 2.10
    // because these features were released in 2.11 version.
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.MultiModalSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.HybridSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralSparseSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralQueryEnricherProcessorIT.*"
        }
    }

    // Excluding the test because hybrid query with rescore is not compatible with 2.14 and lower
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10")
            || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")
            || ext.neural_search_bwc_version.startsWith("2.13") || ext.neural_search_bwc_version.startsWith("2.14")) {
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.HybridSearchWithRescoreIT.*"
        }
    }

    // Excluding the test because we introduce this feature in 2.13
    if (ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralQueryEnricherProcessorIT.testNeuralQueryEnricherProcessor_NeuralSparseSearch_E2EFlow"
        }
    }

    // Excluding the text chunking processor test because we introduce this feature in 2.13
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10") || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.TextChunkingProcessorIT.*"
        }
    }

    // Excluding the k-NN radial search and batch ingestion tests because we introduce these features in 2.14
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10") || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12") || ext.neural_search_bwc_version.startsWith("2.13")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.KnnRadialSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.BatchIngestionIT.*"
        }
    }

    // Excluding the neural sparse two phase processor test because we introduce this feature in 2.15
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10")
            || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")
            || ext.neural_search_bwc_version.startsWith("2.13") || ext.neural_search_bwc_version.startsWith("2.14")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralSparseTwoPhaseProcessorIT.*"
        }
    }


    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}

// Part of rolling upgrade. Upgrades the third node to new OpenSearch version with upgraded plugin version after the
// second node is upgraded. This results in a fully upgraded cluster.
task testRollingUpgrade(type: StandaloneRestIntegTestTask) {
    dependsOn "testAgainstTwoThirdsUpgradedCluster"
    useCluster testClusters."${baseName}"
    if (ext.bwcBundleTest){
        doFirst {
            testClusters."${baseName}".nextNodeToNextVersion()
        }
    }else{
        doFirst {
            testClusters."${baseName}".upgradeNodeAndPluginToNextVersion(project.ext.plugins)
        }
    }
    mustRunAfter "testAgainstOneThirdUpgradedCluster"
    systemProperty 'tests.rest.bwcsuite_cluster', 'upgraded_cluster'
    systemProperty 'tests.skip_delete_model_index', 'true'
    systemProperty 'tests.plugin_bwc_version', ext.neural_search_bwc_version

    //Excluding MultiModalSearchIT, HybridSearchIT, NeuralSparseSearchIT, NeuralQueryEnricherProcessorIT tests from neural search version 2.9 and 2.10
    // because these features were released in 2.11 version.
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.MultiModalSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.HybridSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralSparseSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralQueryEnricherProcessorIT.*"
        }
    }

    // Excluding the test because hybrid query with rescore is not compatible with 2.14 and lower
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10")
            || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")
            || ext.neural_search_bwc_version.startsWith("2.13") || ext.neural_search_bwc_version.startsWith("2.14")) {
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.HybridSearchWithRescoreIT.*"
        }
    }

    // Excluding the test because we introduce this feature in 2.13
    if (ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralQueryEnricherProcessorIT.testNeuralQueryEnricherProcessor_NeuralSparseSearch_E2EFlow"
        }
    }

    // Excluding the text chunking processor test because we introduce this feature in 2.13
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10") || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.TextChunkingProcessorIT.*"
        }
    }

    // Excluding the k-NN radial search and batch ingestion tests because we introduce these features in 2.14
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10") || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12") || ext.neural_search_bwc_version.startsWith("2.13")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.KnnRadialSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.BatchIngestionIT.*"
        }
    }

    // Excluding the neural sparse two phase processor test because we introduce this feature in 2.15
    if (ext.neural_search_bwc_version.startsWith("2.9") || ext.neural_search_bwc_version.startsWith("2.10")
            || ext.neural_search_bwc_version.startsWith("2.11") || ext.neural_search_bwc_version.startsWith("2.12")
            || ext.neural_search_bwc_version.startsWith("2.13") || ext.neural_search_bwc_version.startsWith("2.14")){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralSparseTwoPhaseProcessorIT.*"
        }
    }

    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}
