/*
 *  Copyright OpenSearch Contributors
 *  SPDX-License-Identifier: Apache-2.0
 */

import org.opensearch.gradle.testclusters.StandaloneRestIntegTestTask

apply from : "$rootDir/qa/build.gradle"

def ext=rootProject.ext
String baseName = "neuralSearchBwcCluster-restart"

// Creates a test cluster of previous version and loads k-NN plugin of bwcVersion
testClusters {
    "${baseName}" {
        testDistribution = "ARCHIVE"
        numberOfNodes = 3
        jvmArgs("-Xms1g", "-Xmx4g")
        if(ext.bwcBundleTest){
            versions = [ext.neural_search_bwc_version, ext.currentBundleVersion]
            def path=ext.opensearch_tmp_dir
            nodes.each { node ->
                node.extraConfigFile("kirk.pem", file("$path/kirk.pem"))
                node.extraConfigFile("kirk-key.pem", file("$path/kirk-key.pem"))
                node.extraConfigFile("esnode.pem", file("$path/esnode.pem"))
                node.extraConfigFile("esnode-key.pem", file("$path/esnode-key.pem"))
                node.extraConfigFile("root-ca.pem", file("$path/root-ca.pem"))
                node.setting("plugins.security.disabled", "true")
                node.setting("plugins.security.ssl.transport.pemcert_filepath", "esnode.pem")
                node.setting("plugins.security.ssl.transport.pemkey_filepath", "esnode-key.pem")
                node.setting("plugins.security.ssl.transport.pemtrustedcas_filepath", "root-ca.pem")
                node.setting("plugins.security.ssl.transport.enforce_hostname_verification", "false")
                node.setting("plugins.security.ssl.http.enabled", "true")
                node.setting("plugins.security.ssl.http.pemcert_filepath", "esnode.pem")
                node.setting("plugins.security.ssl.http.pemkey_filepath", "esnode-key.pem")
                node.setting("plugins.security.ssl.http.pemtrustedcas_filepath", "root-ca.pem")
                node.setting("plugins.security.allow_unsafe_democertificates", "true")
                node.setting("plugins.security.allow_default_init_securityindex", "true")
                node.setting("plugins.security.authcz.admin_dn", "CN=kirk,OU=client,O=client,L=test,C=de")
                node.setting("plugins.security.audit.type", "internal_elasticsearch")
                node.setting("plugins.security.enable_snapshot_restore_privilege", "true")
                node.setting("plugins.security.check_snapshot_restore_write_privileges", "true")
                node.setting("plugins.security.restapi.roles_enabled", "[\"all_access\", \"security_rest_api_access\"]")
                node.setting("plugins.security.system_indices.enabled", "true")
            }
        }else{
            versions = [ext.neural_search_bwc_version, opensearch_version]
            plugin(project.tasks.zipBwcMlCommonsPlugin.archiveFile)
            plugin(project.tasks.zipBwcKnnPlugin.archiveFile)
            plugin(project.tasks.zipBwcPlugin.archiveFile)
        }
        setting 'path.repo', "${buildDir}/cluster/shared/repo/${baseName}"
        setting 'http.content_type.required', 'true'
    }
}

def versionsBelow2_11 = ["2.9", "2.10"]
def versionsBelow2_12 = versionsBelow2_11 + "2.11"
def versionsBelow2_13 = versionsBelow2_12 + "2.12"
def versionsBelow2_14 = versionsBelow2_13 + "2.13"
def versionsBelow2_15 = versionsBelow2_14 + "2.14"
def versionsBelow2_16 = versionsBelow2_15 + "2.15"

// Task to run BWC tests against the old cluster
task testAgainstOldCluster(type: StandaloneRestIntegTestTask) {
    if(!ext.bwcBundleTest){
        dependsOn "zipBwcPlugin"
    }
    useCluster testClusters."${baseName}"
    systemProperty 'tests.rest.bwcsuite_cluster', 'old_cluster'
    systemProperty 'tests.is_old_cluster', 'true'
    systemProperty 'tests.skip_delete_model_index', 'true'
    systemProperty 'tests.plugin_bwc_version', ext.neural_search_bwc_version

    // Excluding MultiModalSearchIT, HybridSearchIT, NeuralSparseSearchIT, NeuralQueryEnricherProcessorIT tests from neural search version 2.9 and 2.10
    // because these features were released in 2.11 version.
    if (versionsBelow2_11.any { ext.neural_search_bwc_version.startsWith(it) }){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.MultiModalSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.HybridSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralSparseSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralQueryEnricherProcessorIT.*"
        }
    }

    // Excluding the these tests because we introduce them in 2.13
    if (versionsBelow2_13.any { ext.neural_search_bwc_version.startsWith(it) }){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralQueryEnricherProcessorIT.testNeuralQueryEnricherProcessor_NeuralSparseSearch_E2EFlow"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.TextChunkingProcessorIT.*"
        }
    }

    // Excluding the k-NN radial search tests because we introduce this feature in 2.14
    if (versionsBelow2_14.any { ext.neural_search_bwc_version.startsWith(it) }){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.KnnRadialSearchIT.*"
        }
    }

    // Excluding the NeuralSparseQuery two-phase search pipeline tests because we introduce this feature in 2.15
    if (versionsBelow2_15.any { ext.neural_search_bwc_version.startsWith(it) }){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralSparseTwoPhaseProcessorIT.*"
        }
    }

    // Excluding the batching processor tests because we introduce this feature in 2.16
    if (versionsBelow2_16.any { ext.neural_search_bwc_version.startsWith(it) }){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.BatchIngestionIT.*"
        }
    }

    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}

// All nodes are upgraded to latest version and run the tests
task testAgainstNewCluster(type: StandaloneRestIntegTestTask) {
    dependsOn "testAgainstOldCluster"
    dependsOn rootProject.tasks.assemble
    useCluster testClusters."${baseName}"
    if(ext.bwcBundleTest){
        doFirst {
            testClusters."${baseName}".goToNextVersion()
        }
    }else{
        doFirst {
            testClusters."${baseName}".upgradeAllNodesAndPluginsToNextVersion(project.ext.plugins)
        }
    }
    systemProperty 'tests.rest.bwcsuite_cluster', 'upgraded_cluster'
    systemProperty 'tests.skip_delete_model_index', 'true'
    systemProperty 'tests.is_old_cluster', 'false'
    systemProperty 'tests.plugin_bwc_version', ext.neural_search_bwc_version

    // Excluding MultiModalSearchIT, HybridSearchIT, NeuralSparseSearchIT, NeuralQueryEnricherProcessorIT tests from neural search version 2.9 and 2.10
    // because these features were released in 2.11 version.
    if (versionsBelow2_11.any { ext.neural_search_bwc_version.startsWith(it) }){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.MultiModalSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.HybridSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralSparseSearchIT.*"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralQueryEnricherProcessorIT.*"
        }
    }

    // Excluding these tests because we introduce them in 2.13
    if (versionsBelow2_13.any { ext.neural_search_bwc_version.startsWith(it) }){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralQueryEnricherProcessorIT.testNeuralQueryEnricherProcessor_NeuralSparseSearch_E2EFlow"
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.TextChunkingProcessorIT.*"
        }
    }

    // Excluding the k-NN radial search tests because we introduce this feature in 2.14
    if (versionsBelow2_14.any { ext.neural_search_bwc_version.startsWith(it) }){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.KnnRadialSearchIT.*"
        }
    }

    // Excluding the NeuralSparseQuery two-phase search pipeline tests because we introduce this feature in 2.15
    if (versionsBelow2_15.any { ext.neural_search_bwc_version.startsWith(it) }){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.NeuralSparseTwoPhaseProcessorIT.*"
        }
    }

    // Excluding the batch processor tests because we introduce this feature in 2.16
    if (versionsBelow2_16.any { ext.neural_search_bwc_version.startsWith(it) }){
        filter {
            excludeTestsMatching "org.opensearch.neuralsearch.bwc.BatchIngestionIT.*"
        }
    }

    nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
    systemProperty 'tests.security.manager', 'false'
}
